#!/usr/bin/env python3

import os
import pathlib
import sys
from textwrap import wrap

import requests

vector_url = "https://raw.githubusercontent.com/trezor/python-mnemonic/master/vectors.json"
script_dir = pathlib.Path(__file__).parent.absolute()
cfile_name = "bip39_test_vectors"
destination_file_h = os.path.join(script_dir, "..", f"{cfile_name}.h")
destination_file_c = os.path.join(script_dir, "..", f"{cfile_name}.c")


def main():
    response = requests.get(vector_url)
    if response.status_code != 200:
        print("Failed to download vectors.json")
        sys.exit(1)

    vectors = response.json()
    if "english" not in vectors:
        print("Invalid vector list. Has no english vectors")
        sys.exit(1)

    with open(destination_file_h, "w") as f:
        f.write("""/*  This file was generated by helpers/%s
    DO NOT EDIT MANUALLY */
#ifndef HPWG_BIP39_TEST_VECTORS_H
#define HPWG_BIP39_TEST_VECTORS_H

#ifdef __cplusplus
extern "C" {
#endif

#define BIP39_VECTOR_COUNT %d

int vectorEntropyBytesLengthAtIndex(unsigned int index);
int vectorEntropyBitsAtIndex(unsigned int index);
void vectorEntropyStrAtIndex(char *dest_str, unsigned int index);
void vectorEntropyAtIndex(unsigned char *dest_bytes, unsigned int index);
int vectorWordsCountAtIndex(unsigned int index);
void vectorWordAtIndex(char *dest_str, unsigned int inde, unsigned int word_numx);
void vectorSeedAtIndex(char *dest_str, unsigned int index);
void vectorXprvAtIndex(char *dest_str, unsigned int index);

#ifdef __cplusplus
} // extern "C"
#endif

#endif // HPWG_BIP39_TEST_VECTORS_H
""" % (os.path.basename(__file__), len(vectors["english"])))
        print("Saving file to %s" % destination_file_h)

    with open(destination_file_c, "w") as f:
        f.write("""/*  This file was generated by helpers/%s
    Downloaded from %s
    DO NOT EDIT MANUALLY */
// clang-format off

#include "%s.h"
#include <stdlib.h>
#include <string.h>

""" % (os.path.basename(__file__), vector_url, cfile_name))

        # Entropy
        f.write("const int   vectorEntropyBytesLength[BIP39_VECTOR_COUNT] = {")
        for vector in vectors["english"]:
            f.write("%d, " % (len(vector[0])*4/8))
        f.write("};\n")

        f.write("const int   vectorEntropyBits[BIP39_VECTOR_COUNT] = {")
        for vector in vectors["english"]:
            f.write("%d, " % (len(vector[0])*4))
        f.write("};\n")

        f.write("const char* vectorEntropyStr[BIP39_VECTOR_COUNT] = {\n")
        for vector in vectors["english"]:
            f.write('  "%s",\n' % vector[0])
        f.write("};\n")

        f.write(
            "const unsigned char vectorEntropy[BIP39_VECTOR_COUNT][32] = {\n")
        for vector in vectors["english"]:
            f.write("  {0x%s},\n" % ", 0x".join(
                c for c in wrap(vector[0], 2)))
        f.write("};\n\n")

        # Mnemonic
        f.write("const int   vectorWordsCount[BIP39_VECTOR_COUNT] = {")
        for vector in vectors["english"]:
            f.write("%d, " % (len(vector[1].split())))
        f.write("};\n")

        f.write("const char* vectorWords[BIP39_VECTOR_COUNT][24] = {\n")
        for vector in vectors["english"]:
            f.write('  {"%s"},\n' % '", "'.join(vector[1].split()))
        f.write("};\n\n")

        # Seed
        f.write("const char* vectorSeed[BIP39_VECTOR_COUNT] = {\n")
        for vector in vectors["english"]:
            f.write('  "%s",\n' % vector[2])
        f.write("};\n\n")

        # Xprv
        f.write("const char* vectorXprv[BIP39_VECTOR_COUNT] = {\n")
        for vector in vectors["english"]:
            f.write('  "%s",\n' % vector[3])
        f.write("};\n")

        # Functions
        f.write("""
int vectorEntropyBytesLengthAtIndex(unsigned int index) {
  if (index >= BIP39_VECTOR_COUNT) return -1;
  return vectorEntropyBytesLength[index];
}

int vectorEntropyBitsAtIndex(unsigned int index) {
  if (index >= BIP39_VECTOR_COUNT) return -1;
  return vectorEntropyBits[index];
}

void vectorEntropyStrAtIndex(char *dest_str, unsigned int index) {
  if (index >= BIP39_VECTOR_COUNT) {
    dest_str[0] = '\\0';
  } else {
    strcpy(dest_str, vectorEntropyStr[index]);
  }
  return;
}

void vectorEntropyAtIndex(unsigned char *dest_bytes, unsigned int index) {
  if (index >= BIP39_VECTOR_COUNT) {
    dest_bytes[0] = '\\0';
  } else {
    memcpy(dest_bytes, vectorEntropy[index], vectorEntropyBytesLength[index]);
  }
  return;
}

int vectorWordsCountAtIndex(unsigned int index) {
  if (index >= BIP39_VECTOR_COUNT) return -1;
  return vectorWordsCount[index];
}

void vectorWordAtIndex(char *dest_str, unsigned int index, unsigned int word_num) {
  if (index >= BIP39_VECTOR_COUNT || word_num > vectorWordsCount[index] ) {
    dest_str[0] = '\\0';
  } else {
    strcpy(dest_str, vectorWords[index][word_num]);
  }
  return;
}

void vectorSeedAtIndex(char *dest_str, unsigned int index) {
  if (index >= BIP39_VECTOR_COUNT) {
    dest_str[0] = '\\0';
  } else {
    strcpy(dest_str, vectorSeed[index]);
  }
  return;
}

void vectorXprvAtIndex(char *dest_str, unsigned int index) {
  if (index >= BIP39_VECTOR_COUNT) {
    dest_str[0] = '\\0';
  } else {
    strcpy(dest_str, vectorXprv[index]);
  }
  return;
}
""")
        print("Saving file to %s" % destination_file_c)


if __name__ == "__main__":
    main()
